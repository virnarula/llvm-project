; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; REQUIRES: asserts
; RUN: opt -passes=loop-extract-analysis -pass-remarks-analysis=loop-extract-analysis -debug-only=loop-extract-analysis -S < %s 2>&1 | FileCheck %s

; ModuleID = 'loop-extraction/basic.cpp'
source_filename = "loop-extraction/basic.cpp"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx12.0.0"

; Function Attrs: noinline norecurse optnone ssp uwtable
define i32 @main() #0 {
; CHECK-LABEL: @main(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[TMP2:%.*]] = alloca double, align 8
; CHECK-NEXT:    [[TMP3:%.*]] = alloca i64, align 8
; CHECK-NEXT:    store i32 0, i32* [[TMP1]], align 4
; CHECK-NEXT:    store i64 0, i64* [[TMP3]], align 8
; CHECK-NEXT:    br label [[TMP4:%.*]]
; CHECK:       4:
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, i64* [[TMP3]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = icmp ult i64 [[TMP5]], 100000
; CHECK-NEXT:    br i1 [[TMP6]], label [[TMP7:%.*]], label [[TMP15:%.*]]
; CHECK:       7:
; CHECK-NEXT:    [[TMP8:%.*]] = call i32 @rand()
; CHECK-NEXT:    [[TMP9:%.*]] = sitofp i32 [[TMP8]] to double
; CHECK-NEXT:    [[TMP10:%.*]] = load double, double* [[TMP2]], align 8
; CHECK-NEXT:    [[TMP11:%.*]] = fadd double [[TMP10]], [[TMP9]]
; CHECK-NEXT:    store double [[TMP11]], double* [[TMP2]], align 8
; CHECK-NEXT:    br label [[TMP12:%.*]]
; CHECK:       12:
; CHECK-NEXT:    [[TMP13:%.*]] = load i64, i64* [[TMP3]], align 8
; CHECK-NEXT:    [[TMP14:%.*]] = add i64 [[TMP13]], 1
; CHECK-NEXT:    store i64 [[TMP14]], i64* [[TMP3]], align 8
; CHECK-NEXT:    br label [[TMP4]]
; CHECK:       15:
; CHECK-NEXT:    [[TMP16:%.*]] = load double, double* [[TMP2]], align 8
; CHECK-NEXT:    [[TMP17:%.*]] = fptosi double [[TMP16]] to i32
; CHECK-NEXT:    ret i32 [[TMP17]]
;
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i64, align 8
  store i32 0, i32* %1, align 4
  store i64 0, i64* %3, align 8
  br label %4

4:                                                ; preds = %12, %0
  %5 = load i64, i64* %3, align 8
  %6 = icmp ult i64 %5, 100000
  br i1 %6, label %7, label %15

7:                                                ; preds = %4
  %8 = call i32 @rand()
  %9 = sitofp i32 %8 to double
  %10 = load double, double* %2, align 8
  %11 = fadd double %10, %9
  store double %11, double* %2, align 8
  br label %12

12:                                               ; preds = %7
  %13 = load i64, i64* %3, align 8
  %14 = add i64 %13, 1
  store i64 %14, i64* %3, align 8
  br label %4

15:                                               ; preds = %4
  %16 = load double, double* %2, align 8
  %17 = fptosi double %16 to i32
  ret i32 %17
}

declare i32 @rand() #1

attributes #0 = { noinline norecurse optnone ssp uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #1 = { "frame-pointer"="non-leaf" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = !{i32 2, !"SDK Version", [2 x i32] [i32 12, i32 3]}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 1, !"branch-target-enforcement", i32 0}
!3 = !{i32 1, !"sign-return-address", i32 0}
!4 = !{i32 1, !"sign-return-address-all", i32 0}
!5 = !{i32 1, !"sign-return-address-with-bkey", i32 0}
!6 = !{i32 7, !"PIC Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 1}
!8 = !{i32 7, !"frame-pointer", i32 1}
!9 = !{!"Apple clang version 13.1.6 (clang-1316.0.21.2.5)"}
