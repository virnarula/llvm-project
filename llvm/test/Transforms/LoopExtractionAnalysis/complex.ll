; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; REQUIRES: asserts
; RUN: opt -passes=loop-extract-analysis -pass-remarks-analysis=loop-extract-analysis -debug-only=loop-extract-analysis -S < %s 2>&1 | FileCheck %s

; ModuleID = 'loop-extraction/complex.cpp'
source_filename = "loop-extraction/complex.cpp"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx12.0.0"

; Function Attrs: noinline optnone ssp uwtable
define double @_Z14other_functionv() #0 {
; CHECK-LABEL: @_Z14other_functionv(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca double, align 8
; CHECK-NEXT:    [[TMP2:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store double 0.000000e+00, double* [[TMP1]], align 8
; CHECK-NEXT:    br label [[TMP3:%.*]]
; CHECK:       3:
; CHECK-NEXT:    [[TMP4:%.*]] = load double, double* [[TMP1]], align 8
; CHECK-NEXT:    [[TMP5:%.*]] = fcmp olt double [[TMP4]], 1.000000e+03
; CHECK-NEXT:    br i1 [[TMP5]], label [[TMP6:%.*]], label [[TMP21:%.*]]
; CHECK:       6:
; CHECK-NEXT:    store i32 0, i32* [[TMP2]], align 4
; CHECK-NEXT:    br label [[TMP7:%.*]]
; CHECK:       7:
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, i32* [[TMP2]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = icmp slt i32 [[TMP8]], 1000
; CHECK-NEXT:    br i1 [[TMP9]], label [[TMP10:%.*]], label [[TMP18:%.*]]
; CHECK:       10:
; CHECK-NEXT:    [[TMP11:%.*]] = call i32 @rand()
; CHECK-NEXT:    [[TMP12:%.*]] = sitofp i32 [[TMP11]] to double
; CHECK-NEXT:    [[TMP13:%.*]] = load double, double* [[TMP1]], align 8
; CHECK-NEXT:    [[TMP14:%.*]] = fadd double [[TMP13]], [[TMP12]]
; CHECK-NEXT:    store double [[TMP14]], double* [[TMP1]], align 8
; CHECK-NEXT:    br label [[TMP15:%.*]]
; CHECK:       15:
; CHECK-NEXT:    [[TMP16:%.*]] = load i32, i32* [[TMP2]], align 4
; CHECK-NEXT:    [[TMP17:%.*]] = add nsw i32 [[TMP16]], 1
; CHECK-NEXT:    store i32 [[TMP17]], i32* [[TMP2]], align 4
; CHECK-NEXT:    br label [[TMP7]]
; CHECK:       18:
; CHECK-NEXT:    [[TMP19:%.*]] = load double, double* [[TMP1]], align 8
; CHECK-NEXT:    [[TMP20:%.*]] = fadd double [[TMP19]], 1.000000e+00
; CHECK-NEXT:    store double [[TMP20]], double* [[TMP1]], align 8
; CHECK-NEXT:    br label [[TMP3]]
; CHECK:       21:
; CHECK-NEXT:    [[TMP22:%.*]] = load double, double* [[TMP1]], align 8
; CHECK-NEXT:    ret double [[TMP22]]
;
  %1 = alloca double, align 8
  %2 = alloca i32, align 4
  store double 0.000000e+00, double* %1, align 8
  br label %3

3:                                                ; preds = %18, %0
  %4 = load double, double* %1, align 8
  %5 = fcmp olt double %4, 1.000000e+03
  br i1 %5, label %6, label %21

6:                                                ; preds = %3
  store i32 0, i32* %2, align 4
  br label %7

7:                                                ; preds = %15, %6
  %8 = load i32, i32* %2, align 4
  %9 = icmp slt i32 %8, 1000
  br i1 %9, label %10, label %18

10:                                               ; preds = %7
  %11 = call i32 @rand()
  %12 = sitofp i32 %11 to double
  %13 = load double, double* %1, align 8
  %14 = fadd double %13, %12
  store double %14, double* %1, align 8
  br label %15

15:                                               ; preds = %10
  %16 = load i32, i32* %2, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %2, align 4
  br label %7

18:                                               ; preds = %7
  %19 = load double, double* %1, align 8
  %20 = fadd double %19, 1.000000e+00
  store double %20, double* %1, align 8
  br label %3

21:                                               ; preds = %3
  %22 = load double, double* %1, align 8
  ret double %22
}

declare i32 @rand() #1

; Function Attrs: noinline norecurse optnone ssp uwtable
define i32 @main() #2 {
; CHECK-LABEL: @main(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[TMP2:%.*]] = alloca double, align 8
; CHECK-NEXT:    [[TMP3:%.*]] = alloca i64, align 8
; CHECK-NEXT:    [[TMP4:%.*]] = alloca i64, align 8
; CHECK-NEXT:    store i32 0, i32* [[TMP1]], align 4
; CHECK-NEXT:    store i64 0, i64* [[TMP3]], align 8
; CHECK-NEXT:    br label [[TMP5:%.*]]
; CHECK:       5:
; CHECK-NEXT:    [[TMP6:%.*]] = load i64, i64* [[TMP3]], align 8
; CHECK-NEXT:    [[TMP7:%.*]] = icmp ult i64 [[TMP6]], 1000
; CHECK-NEXT:    br i1 [[TMP7]], label [[TMP8:%.*]], label [[TMP35:%.*]]
; CHECK:       8:
; CHECK-NEXT:    [[TMP9:%.*]] = load i64, i64* [[TMP3]], align 8
; CHECK-NEXT:    store i64 [[TMP9]], i64* [[TMP4]], align 8
; CHECK-NEXT:    br label [[TMP10:%.*]]
; CHECK:       10:
; CHECK-NEXT:    [[TMP11:%.*]] = load i64, i64* [[TMP4]], align 8
; CHECK-NEXT:    [[TMP12:%.*]] = icmp ult i64 [[TMP11]], 1000
; CHECK-NEXT:    br i1 [[TMP12]], label [[TMP13:%.*]], label [[TMP24:%.*]]
; CHECK:       13:
; CHECK-NEXT:    [[TMP14:%.*]] = call i32 @rand()
; CHECK-NEXT:    [[TMP15:%.*]] = sext i32 [[TMP14]] to i64
; CHECK-NEXT:    [[TMP16:%.*]] = load i64, i64* [[TMP4]], align 8
; CHECK-NEXT:    [[TMP17:%.*]] = mul i64 [[TMP15]], [[TMP16]]
; CHECK-NEXT:    [[TMP18:%.*]] = uitofp i64 [[TMP17]] to double
; CHECK-NEXT:    [[TMP19:%.*]] = load double, double* [[TMP2]], align 8
; CHECK-NEXT:    [[TMP20:%.*]] = fadd double [[TMP19]], [[TMP18]]
; CHECK-NEXT:    store double [[TMP20]], double* [[TMP2]], align 8
; CHECK-NEXT:    br label [[TMP21:%.*]]
; CHECK:       21:
; CHECK-NEXT:    [[TMP22:%.*]] = load i64, i64* [[TMP4]], align 8
; CHECK-NEXT:    [[TMP23:%.*]] = add i64 [[TMP22]], 1
; CHECK-NEXT:    store i64 [[TMP23]], i64* [[TMP4]], align 8
; CHECK-NEXT:    br label [[TMP10]]
; CHECK:       24:
; CHECK-NEXT:    [[TMP25:%.*]] = call i32 @rand()
; CHECK-NEXT:    [[TMP26:%.*]] = sext i32 [[TMP25]] to i64
; CHECK-NEXT:    [[TMP27:%.*]] = load i64, i64* [[TMP3]], align 8
; CHECK-NEXT:    [[TMP28:%.*]] = mul i64 [[TMP26]], [[TMP27]]
; CHECK-NEXT:    [[TMP29:%.*]] = uitofp i64 [[TMP28]] to double
; CHECK-NEXT:    [[TMP30:%.*]] = load double, double* [[TMP2]], align 8
; CHECK-NEXT:    [[TMP31:%.*]] = fadd double [[TMP30]], [[TMP29]]
; CHECK-NEXT:    store double [[TMP31]], double* [[TMP2]], align 8
; CHECK-NEXT:    br label [[TMP32:%.*]]
; CHECK:       32:
; CHECK-NEXT:    [[TMP33:%.*]] = load i64, i64* [[TMP3]], align 8
; CHECK-NEXT:    [[TMP34:%.*]] = add i64 [[TMP33]], 1
; CHECK-NEXT:    store i64 [[TMP34]], i64* [[TMP3]], align 8
; CHECK-NEXT:    br label [[TMP5]]
; CHECK:       35:
; CHECK-NEXT:    [[TMP36:%.*]] = call double @_Z14other_functionv()
; CHECK-NEXT:    [[TMP37:%.*]] = load double, double* [[TMP2]], align 8
; CHECK-NEXT:    [[TMP38:%.*]] = fadd double [[TMP37]], [[TMP36]]
; CHECK-NEXT:    store double [[TMP38]], double* [[TMP2]], align 8
; CHECK-NEXT:    [[TMP39:%.*]] = load double, double* [[TMP2]], align 8
; CHECK-NEXT:    [[TMP40:%.*]] = fptosi double [[TMP39]] to i32
; CHECK-NEXT:    ret i32 [[TMP40]]
;
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i32 0, i32* %1, align 4
  store i64 0, i64* %3, align 8
  br label %5

5:                                                ; preds = %32, %0
  %6 = load i64, i64* %3, align 8
  %7 = icmp ult i64 %6, 1000
  br i1 %7, label %8, label %35

8:                                                ; preds = %5
  %9 = load i64, i64* %3, align 8
  store i64 %9, i64* %4, align 8
  br label %10

10:                                               ; preds = %21, %8
  %11 = load i64, i64* %4, align 8
  %12 = icmp ult i64 %11, 1000
  br i1 %12, label %13, label %24

13:                                               ; preds = %10
  %14 = call i32 @rand()
  %15 = sext i32 %14 to i64
  %16 = load i64, i64* %4, align 8
  %17 = mul i64 %15, %16
  %18 = uitofp i64 %17 to double
  %19 = load double, double* %2, align 8
  %20 = fadd double %19, %18
  store double %20, double* %2, align 8
  br label %21

21:                                               ; preds = %13
  %22 = load i64, i64* %4, align 8
  %23 = add i64 %22, 1
  store i64 %23, i64* %4, align 8
  br label %10

24:                                               ; preds = %10
  %25 = call i32 @rand()
  %26 = sext i32 %25 to i64
  %27 = load i64, i64* %3, align 8
  %28 = mul i64 %26, %27
  %29 = uitofp i64 %28 to double
  %30 = load double, double* %2, align 8
  %31 = fadd double %30, %29
  store double %31, double* %2, align 8
  br label %32

32:                                               ; preds = %24
  %33 = load i64, i64* %3, align 8
  %34 = add i64 %33, 1
  store i64 %34, i64* %3, align 8
  br label %5

35:                                               ; preds = %5
  %36 = call double @_Z14other_functionv()
  %37 = load double, double* %2, align 8
  %38 = fadd double %37, %36
  store double %38, double* %2, align 8
  %39 = load double, double* %2, align 8
  %40 = fptosi double %39 to i32
  ret i32 %40
}

attributes #0 = { noinline optnone ssp uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #1 = { "frame-pointer"="non-leaf" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #2 = { noinline norecurse optnone ssp uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = !{i32 2, !"SDK Version", [2 x i32] [i32 12, i32 3]}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 1, !"branch-target-enforcement", i32 0}
!3 = !{i32 1, !"sign-return-address", i32 0}
!4 = !{i32 1, !"sign-return-address-all", i32 0}
!5 = !{i32 1, !"sign-return-address-with-bkey", i32 0}
!6 = !{i32 7, !"PIC Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 1}
!8 = !{i32 7, !"frame-pointer", i32 1}
!9 = !{!"Apple clang version 13.1.6 (clang-1316.0.21.2.5)"}
